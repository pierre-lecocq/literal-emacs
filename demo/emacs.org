* Common

Generic variables setup

#+begin_src emacs-lisp :tangle lisp/common.el
(setq debug-on-error t)

(setq user-full-name "My name"
      user-mail-address "my.name@mail.com")
#+end_src

Require some internal libs

#+begin_src emacs-lisp :tangle lisp/common.el
(require 'linum)
(require 'paren)
#+end_src

Activate some internal features

#+begin_src emacs-lisp :tangle lisp/common.el
(auto-compression-mode 1)
(column-number-mode 1)
(global-auto-revert-mode 1)
(global-font-lock-mode 1)
(global-hl-line-mode 1)
(line-number-mode 1)
(show-paren-mode 1)
(transient-mark-mode 1)
(which-function-mode 1)
#+end_src

No need backup. Let's be brave.

#+begin_src emacs-lisp :tangle lisp/common.el
(setq backup-inhibited t
      make-backup-files nil
      auto-save-default nil)
#+end_src

Startup messgage and scratch buffer setup

#+begin_src emacs-lisp :tangle lisp/common.el
(setq initial-scratch-message (format ";; Scratch buffer - started on %s\n\n" (current-time-string))
      inhibit-startup-message t
      inhibit-splash-screen t)
#+end_src

Uniquify the buffer's name

#+begin_src emacs-lisp :tangle lisp/common.el
(setq uniquify-buffer-name-style 'forward uniquify-separator "/")
#+end_src

* Packages

** Package manager
Setup the package manager

#+begin_src emacs-lisp :tangle lisp/packages.el
(require 'package)

(setq package-user-dir (expand-file-name "./lisp/vendor"))

(setq package-archives
      '(("melpa"        . "http://melpa.org/packages/")
        ("gnu"          . "http://elpa.gnu.org/packages/")
        ("marmalade"    . "http://marmalade-repo.org/packages/")
        ("org"          . "http://orgmode.org/elpa/")))

(package-initialize)

(when (not package-archive-contents)
  (package-refresh-contents))
#+end_src

** External packages

Install and configure =anzu=

#+begin_src emacs-lisp :tangle lisp/packages.el
(unless (package-installed-p 'anzu)
  (package-install 'anzu))
(global-anzu-mode +1)
(set-face-attribute 'anzu-mode-line nil :foreground "yellow")
#+end_src

Install and configure =autopair=

#+begin_src emacs-lisp :tangle lisp/packages.el
(unless (package-installed-p 'autopair)
  (package-install 'autopair))
(autopair-global-mode t)
#+end_src

Install and configure =darkmin-theme=

#+begin_src emacs-lisp :tangle lisp/packages.el
(unless (package-installed-p 'darkmine-theme)
  (package-install 'darkmine-theme))
(load-theme 'darkmine t)
#+end_src

Install and configure =symon-mode=

#+begin_src emacs-lisp :tangle lisp/packages.el
(unless (package-installed-p 'symon)
  (package-install 'symon))
(setq symon-delay 5)
(symon-mode t)
#+end_src

* Hooks

Set the prog-mode hook

#+begin_src emacs-lisp :tangle lisp/hooks.el
(defun hook-prog-mode ()
  "Hook for Prog mode."
  (local-set-key (kbd "C-c <right>") 'hs-show-block)
  (local-set-key (kbd "C-c <left>")  'hs-hide-block)
  (local-set-key (kbd "C-c <up>")    'hs-hide-all)
  (local-set-key (kbd "C-c <down>")  'hs-show-all)
  (hs-minor-mode t)
  (rainbow-delimiters-mode))

(add-hook 'prog-mode-hook #'hook-prog-mode)
#+end_src

Set the text-mode hook

#+begin_src emacs-lisp :tangle lisp/hooks.el
(defun hook-text-mode ()
  "Hook  for Text mode."
  (linum-mode 1)
  (make-local-variable 'linum-format)
  (setq linum-format " %d "))

(add-hook 'text-mode-hook #'hook-text-mode)
#+end_src

* Bootstrap

We create a bootstrap file to load all the lisp files that were generated by the code blocks above

#+begin_src emacs-lisp :tangle emacs.el
(load-file "lisp/common.el")
(load-file "lisp/packages.el")
(load-file "lisp/hooks.el")
#+end_src
